name: Create Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release Type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
        default: 'patch'

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      actions: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: develop

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 24
          cache: 'pnpm'

      - name: Configure Git
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'

      - name: Calculate new version
        id: version
        run: |
          current_version=$(node -p "require('./package.json').version")
          echo "Current version: $current_version"
          
          # Calculate new version based on release type
          if [ "${{ github.event.inputs.release_type }}" = "major" ]; then
            new_version=$(node -p "const [major, minor, patch] = '${current_version}'.split('.'); \`${Number(major) + 1}.0.0\`")
          elif [ "${{ github.event.inputs.release_type }}" = "minor" ]; then
            new_version=$(node -p "const [major, minor, patch] = '${current_version}'.split('.'); \`${major}.${Number(minor) + 1}.0\`")
          else
            new_version=$(node -p "const [major, minor, patch] = '${current_version}'.split('.'); \`${major}.${minor}.${Number(patch) + 1}\`")
          fi
          
          echo "New version: $new_version"
          echo "new_version=$new_version" >> $GITHUB_OUTPUT

      - name: Update package.json version
        run: |
          pnpm version ${{ steps.version.outputs.new_version }} --no-git-tag-version
          git add package.json pnpm-lock.yaml
          git commit -m "chore: bump version to v${{ steps.version.outputs.new_version }}"
          git push origin develop
          
      - name: Create PR from develop to release
        id: create-pr
        run: |
          PR_URL=$(gh pr create --base master --head develop \
            --title "Release v${{ steps.version.outputs.new_version }}" \
            --body "## Release v${{ steps.version.outputs.new_version }}\n\nThis PR was automatically created by the release workflow.\n\nRelease type: ${{ github.event.inputs.release_type }}")
          echo "PR URL: $PR_URL"
          PR_NUMBER=$(echo $PR_URL | grep -o '[0-9]\+$')
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # GitHub release will only be created after the PR is merged manually
